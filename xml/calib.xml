<?xml version="1.0" ?>
<rdbms        xsi:noNamespaceSchemaLocation="rdbmsDescrip.xsd"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       dbs="calib"
       SchemaVersion="2.0"
       SchemaExpected="2.0"
       CVSid= "$Id: calib_test.xml,v 1.8 2005/10/29 06:33:35 jrb Exp $"   >
  <table name="metadata_v2r1" 
    comment="metadata table for LAT calibrations" version="v2r1">
    <!-- define columns -->

    <col name="ser_no" >    <!-- value of name is an ID -->
      <!-- typename attribute is required. Allowed values
      come from a fixed set, more or less subset of 
      SQL types 
      -->
      <src null="false">
        <from agent="auto_increment" />
      </src>
      <type typename="mediumint">
        <!-- The restriction element is optional.  can also indicate
        min and/or max, required enum set, or recommended enum set 
        -->
        <restriction>          
          <nonnegative />   
        </restriction>
      </type>
      <comment>This is the primary key, automatically set when a 
          row is inserted.</comment>
    </col>

    <col name="instrument" >
      <!-- this is a required field -->
      <src  null="false" stickyInsert="true"> 
        <from agent="enduser"  />
      </src>
      <type typename="varchar" size="24">
        <restriction>
          <enum use="prefer" values="LAT EM EM2 miniTower"/>
        </restriction>
      </type>
      <comment>Instrument on which calibration occurred.  Standard
        calibration software is only guaranteed to work with
        instruments from the recommended set.
     </comment>
    </col>

    <col name="calib_type" >
      <src null="false">  <!-- i.e. this is a required field -->
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="20">
        <restriction>
          <enum use="prefer" values=
            "TKR_DeadChan TKR_HotChan TKR_Splits TKR_TOTSignal TKR_ChargeScale TKR_TrgThresh TKR_DataThresh CAL_Ped CAL_MuSlope CAL_MevPerDac CAL_TholdCI CAL_TholdMuon CAL_Asym CAL_ElecGain CAL_LightAsym CAL_IntNonlin ACD_Ped ACD_ElecGain Test_Gen ANC_TaggerPed ANC_TaggerGain ANC_QdcPed" />
        </restriction>
      </type>
      <comment>Calibration type.  Standard
        calibration software is only guaranteed to work with
        those on the recommended list.
     </comment>
    </col>
    
    <col name="flavor" >
      <src null="false" stickyInsert="true">
        <default value="vanilla" />
      </src>
      <type typename="varchar" size="40">
        <restriction>
          <enum use="prefer" values="vanilla ideal" />
        </restriction>
      </type>
      <comment>Normal production calibrations will be "vanilla".
             "ideal" is commonly used for simulations
    </comment>
    </col>
    
    <col name="data_fmt" >
      <src null="false" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="10">
        <restriction>
          <enum use="prefer" values="XML ROOT" />
        </restriction>
      </type>
      <comment>XML is the only supported format for most calibrations</comment>
    </col>
    
    <col name="data_ident" >
      <src null="false" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255">
        <restriction>
          <file />
        </restriction>
      </type>
      <comment>Typically complete path and filename for the calibration 
     data.  May include one or more environment variables written with 
     delimiters
      $(...), e.g. a plausible data_ident might be
                  $(EMcalibroot)/Cal/CalMuSlope_LAT.xml
    </comment>
    <!-- 
        [maybe should change to using standard unix delimiters
            ${..} ? Or does it matter, since Windows does it differently?]
    -->
    </col>

    <col name="vstart" >
      <src  null="false" stickyInsert="true"> 
        <from agent="enduser" />
      </src>
      <type typename="datetime">
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>Start of period for which calibration is valid. MUST be 
            supplied by user</comment>
    </col>

    <col name="vend" >
      <!-- If no value is supplied, calibration is marked as being
      valid until the last possible time
      -->
      <src null="true" stickyInsert="true"> 
        <default value="2037-12-31" />
      </src>
      <type typename="datetime">
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>End of period for which calibration is valid</comment>
    </col>

    <col name="proc_level" >
      <src null="false" stickyInsert="true">
        <default value="TEST" />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="PROD TEST DEV SUPSED" />
        </restriction>
      </type>
      <comment>
      Is this calibration to be taken seriously (i.e., PROD)? Ideally,
      only one calibration of a given calib_type, flavor, etc.,
      covering a particular instant should be PROD at a time.
    </comment>
    </col>


    <col name="completion" >
      <src null="false" stickyInsert="true">
        <from agent="enduser"  />
      </src>
      <type typename="enum">
        <restriction>
          <enum use="require" values="OK INC ABORT" />
        </restriction>
      </type>
      <comment>Every calibration must be marked with one of these
      completion states.  "OK" just means the procedure completed,
      not necessarily that the results were any good.
    </comment>
    </col>      



    <col name="locale" >
      <!-- Should it be required rather than defaulted? -->
      <src null="false" stickyInsert="true"> 
        <default value="orbit" />
      </src>
      <type typename="varchar" size="12">
        <restriction>
          <enum use="prefer" values="orbit SLAC NRL CERN" />
        </restriction>
      </type>
      <comment>Where the data was taken.  May be used "as is" or may
        be input to some procedure, such as a root macro or analysis job.
    </comment>
    </col>


    <col name="input_desc" >
      <src null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about input to calibration algorithm</comment>
    </col>

    <col name="notes" >
      <src null="true" >
        <from agent="enduser" />
      </src>
      <type typename="varchar" size="255" />
      <comment>Optional comments about anything at all</comment>
    </col>


    <col name="fmt_version" >
      <!-- optional; enduser specifies if anyone does -->
      <src null="true" stickyInsert="true">
        <from agent="enduser"  />
      </src>
      <type typename="varchar" size="16" />
      <!-- might add restriction which is a pattern definition, e.g.
      Vnnn.Rnnn.Pnnn
      -->
      <comment>Optional place to specify what version of data format was
             used for this data set, so that consumers can decide 
             how or whether to read it
    </comment>
    </col>

    <col name="update_time" >
      <!-- field is nullable in a non-standard fashion.  It never really
      contains null; however when it is left unspecified rdbms will
      fill it with current time. 
      Note src element is redundant once we know type is "timestamp"
      -->
      <src null="true">
        <from agent="service" contents="update_time" />         
      </src>
      <type typename="timestamp" size="14" />
      <comment>Time of last modification to row. Equal to time it was entered
      if there were no subsequent mods.  End user is not allowed to set it
    </comment>
    </col>

    <col name="enter_time" >
      <src null="true" >
        <from agent="service" contents="insert_time" />         
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this calibration was entered into database, to be
      set automatically by service (not by end user)
    </comment>
    </col>
    

    <col name="prod_start" >
      <src null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date when this calibration was declared to be PROD (if it ever was)
    </comment>
    </col>

    <col name="prod_end" >
      <src  null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Date, if any, when this calibration ceased being called PROD
    </comment>
    </col>

    <col name="input_start" >
      <src null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Lower bound for time interval over which data input to calib. procedure
      was taken.
    </comment>
    </col>

    <col name="input_end" >
      <src  null="true" stickyInsert="true">
        <from agent="enduser" />
      </src>
      <type typename="datetime" >
        <restriction>
          <interval min="1970-1-1" max="2037-12-31"/>
        </restriction>
      </type>
      <comment>
      Upper bound for time interval over which data input to calib. procedure
      was taken.
    </comment>
    </col>

    <col name="creator" >
      <src  null="true">
        <from agent="service" contents="service_name" />
      </src>
      <!-- could maybe cut down size -->
      <type typename="varchar" size="255" />
      <comment> program, script or whatever adding the row is responsible 
         for filling in this field with something identifying it 
    </comment>
    </col>

    <col name="uid" >
      <src null="false" >
        <from agent="service"  contents="username" />
      </src>
      <type typename="varchar" size="12" />
      <comment>Service creating the row should determine user id invoking
             it and put it in this field.
    </comment>
    </col>


    <col name="data_size" >
      <src null="true" >
        <from agent="enduser" />
      </src>
      <type typename="int" size="11" >
        <restriction>
          <nonnegative />
        </restriction>
      </type>
      <comment>Field is optional.  If supplied, must be non-negative integer
    </comment>
    </col>

    <!-- define primary key, indices -->
    <primary col="ser_no" />

    <index name="typical_search"
      cols="completion instrument calib_type flavor proc_level" />

    <!-- define extra constraints -->
    <assert name="validRow">
      <and>
        <compare relation="lessThan">
          <colRef col="vstart" which="toBe"/>
          <colRef col="vend" which="toBe" />
        </compare>
        <or>
          <isNull>
            <colRef col="prod_start" which="toBe"/>
          </isNull>
          <isNull>
            <colRef col="prod_end" which="toBe"/>
          </isNull>
          <isEmpty>
            <colRef col="prod_start" which="toBe"/>
          </isEmpty>
          <isEmpty>
            <colRef col="prod_end" which="toBe"/>
          </isEmpty>
          <compare relation="lessThan">
            <colRef col="prod_start" which="toBe" />
            <colRef col="prod_end" which="toBe" />
          </compare>
        </or>
        <or>
          <isNull>
            <colRef col="input_start" which="toBe"/>
          </isNull>
          <isNull>
            <colRef col="input_end" which="toBe"/>
          </isNull>
          <isEmpty>
            <colRef col="input_start" which="toBe"/>
          </isEmpty>
          <isEmpty>
            <colRef col="input_end" which="toBe"/>
          </isEmpty>
          <compare relation="lessThan">
            <colRef col="input_start" which="toBe" />
            <colRef col="input_end" which="toBe"/>
          </compare>
        </or>
      </and>
    </assert>

    <!-- To be 'official', completion value must be "OK" and proc_level 
         must be "DEV" or "PROD"; else just do raw insert -->
    <assert name="checkQuality">
      <and>
        <compare relation="equal">
          <colRef col="completion" which="toBe" />
          <value>OK</value>
        </compare>
        <or>
          <compare relation="equal">
            <colRef col="proc_level" which="toBe" />
            <value>PROD</value>
          </compare>
          <compare relation="equal">
            <colRef col="proc_level" which="toBe" />
            <value>DEV</value>
          </compare>
        </or>
      </and>
    </assert>

    <assert name="maySupersede">
      <and>
        <compare relation="equal">
          <colRef col="completion" />
          <value>OK</value>
        </compare>
        <compare relation="equal">
          <colRef col="proc_level" />
          <value>PROD</value>
        </compare>
      </and>
    </assert>

    <assert name="laterVstart">
      <!-- Look for similar rows with later vstart -->
      <and>
        <compare relation="equal">
          <colRef col="flavor" />
          <colRef col="flavor" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="instrument" />
          <colRef col="instrument" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="calib_type" />
          <colRef col="calib_type" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="proc_level" />
          <colRef col="proc_level" which="toBe" />
        </compare>

        <compare relation="greaterThan">
          <colRef col="vstart" />
          <colRef col="vstart" which="toBe" />
        </compare>
      </and>
    </assert>


    <assert name="insertCheck">
      <!-- Look for possible conflicting rows -->
      <and>
        <compare relation="equal">
          <colRef col="flavor" />
          <colRef col="flavor" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="instrument" />
          <colRef col="instrument" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="calib_type" />
          <colRef col="calib_type" which="toBe" />
        </compare>
        <compare relation="equal">
          <colRef col="proc_level" />
          <colRef col="proc_level" which="toBe" />
        </compare>

        <compare relation="lessOrEqual" >
          <colRef col="vstart" />
          <colRef col="vstart" which="toBe" />
        </compare>
        <compare relation="greaterThan">
          <colRef col="vend" />
          <colRef col="vstart" which="toBe" />
        </compare>
      </and>
    </assert>

    <!-- How does one insert a row? First check for internal consistency
         (assertion validRow).  If the row also is "official" - meets
         certain criteria such that we care about it for production
         or near-production use - continue checking:
            If there is another similar row (same calib_type, flavor, etc.)
            with a later vstart time, quit.
            If there are other similar rows with vend > new row's vstart,
            adjust them.
            Then do insert
     -->
    <insertNew internalCond="validRow"  official="checkQuality">
      <interRow>
        <query assertRef="laterVstart" >
          <select>ser_no</select>
        </query>
        <quit />
      </interRow>
      <interRow>
        <query  assertRef="insertCheck" >
          <select>ser_no</select>
        </query>

        <!-- now describe how to update found rows -->
        <set destCol="vend">
          <setColRef col="vstart" which="toBe" />
        </set>
      </interRow>
    </insertNew>

    <!-- when a row is superseded, many of the values will be the same in
         the new row as is in the old.  However, the old row must have
         proc_level changed to SUPSED and proc_end date should be
         set.  New row needs its own values for 

               data_ident
               notes
               data_fmt       (but can default to old value)
               locale         (but can default to old value)
               input_desc     (but can default to old value)
               fmt_version    (but can default to old value)
               input_start    (but can default to old value)
               input_end      (but can default to old value)
               data_size      (but can default to old value)

         Certain other columns get set automatically because value of
         agent field is "service" : enter_time, update_time, creator.
         Also service needs to know to set prod_start to NOW.
         

         Finally, there are a couple conditions which must hold for any row
         to be superseded:  proc_level is PROD and completion is OK
       -->
    <supersede onlyIf="maySupersede" >
      <set destCol="proc_level" destRow="old">
        <value>SUPSED</value>
      </set>
 <!-- timestamp value NOW needs special handling-->
      <set destCol="prod_end" destRow="old">
        <value interp="time">NOW</value> 
      </set>

      <set destCol="prod_start" destRow="toBe">
        <value interp="time">NOW</value> 
      </set>

      <set destCol="proc_level" destRow="toBe">
        <value>PROD</value>
      </set>

      <set destCol="completion" destRow="toBe">
        <value>OK</value>
      </set>

      <set destRow="toBe" destCol="data_ident" >
        <ask />
      </set>
      <set destRow="toBe" destCol="notes" >
        <ask />
      </set>

<!-- this says take value from old row by default, but may override -->

      <set destRow="toBe" destCol="data_fmt" >
        <setColRef which="old" col="data_fmt" force="false" />
      </set>

      <set destRow="toBe" destCol="locale" >
        <setColRef which="old" col="locale" force="false" />
      </set>
        
      <set destRow="toBe" destCol="input_desc" >
        <setColRef which="old" col="input_desc" force="false" />
      </set>
      <set destRow="toBe" destCol="fmt_version" >
        <setColRef which="old" col="fmt_version" force="false" />
      </set>
      <set destRow="toBe" destCol="input_start" >
        <setColRef which="old" col="input_start" force="false" />
      </set>
      <set destRow="toBe" destCol="input_end" >
        <setColRef which="old" col="input_end" force="false" />
      </set>
      <set destRow="toBe" destCol="data_size" >
        <setColRef which="old" col="data_size" force="false" />
      </set>
     <!-- this says take value from old row as is (may not override -->

     <set destRow="toBe" destCol="instrument" >
        <setColRef which="old" col="instrument" />
     </set>

     <set destRow="toBe" destCol="flavor" >
        <setColRef which="old" col="flavor" />
     </set>

     <set destRow="toBe" destCol="calib_type" >
        <setColRef which="old" col="calib_type" />
     </set>

     <set destRow="toBe" destCol="vstart" >
        <setColRef which="old" col="vstart" />
     </set>

     <set destRow="toBe" destCol="vend" >
        <setColRef which="old" col="vend" />
     </set>


    </supersede>
  </table>
</rdbms>
